= PROCESSAMENTO DIGITAL DE IMAGENS
Daniel Henrique Silva Fernandes <danielhenriquesou@hotmail.com>

== Unidade 1

=== 2.2 - Regions
Após compilado, para executar o programa, basta executar da seguinte forma "./img x0 y0 xf yf" onde "img" é a imagem que se queira trabalhar, x0 e y0 são os pontos iniciais de onde o negativo vai começar a passar e xf e yf os finais

[[exa_regions, regions]]
[source,cpp]
----
include::exemplos/regions.cpp[]
----

[[fig_regions,regions]]
[.text-center]
image::figures/regions.png[regions, title = "regions.cpp"]

=== 2.2 Troca de Regiões

[[exa_trocaregioes, trocaregioes]]
[source,cpp]
----
include::exemplos/trocaregioes.cpp[]
----

[[fig_trocaregioes,trocaregioes]]
[.text-center]
image::figures/trocaregioes.png[trocaregioes, title = "trocaregioes.cpp"]

=== 3.2 Mais de 255 objetos

[[exa_3.2-1, 3.2-1]]
[source,cpp]
----
include::exemplos/3.2-1.cpp[]
----

=== 3.2 Regiões com ou sem buracos internos

[[exa_labeling, labeling]]
[source,cpp]
----
include::exemplos/labeling.cpp[]
----
[.text-center]
image::figures/labeling.png[labeling, title = "labeling.cpp"]

=== 4.2 Equalize
[[exa_equalize, equalize]]
[source,cpp]
----
include::exemplos/equalize.cpp[]
----
[.text-center]
image::figures/equalize.png[labeling, title = "equalize.cpp"]

=== 4.2 Motion Detector
[[exa_motiondetector, motiondetector]]
[source,cpp]
----
include::exemplos/motiondetector.cpp[]
----
[.text-center]
image::figures/motiondetector.png[motiondetector, title = "motiondetector.cpp"]

=== 5.2 Laplaciano do Gaussiano
[[exa_lapgauss, lapgauss]]
[source,cpp]
----
include::exemplos/filtroespacial.cpp[]
----
[.text-center]
image::figures/lapgauss.png[lapgauss, title = "lapgauss.cpp"]

== Unidade 2
=== Homomorfico.cpp
De Modo a facilitar o entendimento do código, resolvi aplicar o filtro em uma imagem fixa, de modo que o parâmetro de iluminação pudesse ficar fixo, restando apenas para o programador escolher o valor das variáveis. 
A saída do programa mostrado na Figura 7 apresenta a imagem original, a imagem apos passar pelo filtro homomórfico e a máscara que aplicou a transformação. Lembrando que essa mascara não é um binário de 1 ou 0, e sim de diversos valores reais. O fato de parecer um filtro se da apenas devido a normalização feita para demonstrar para o usuário.  
[[exa_homomorfico, homomorfico]]
[source,cpp]
----
include::exemplos/homomorfico2.cpp[]
----
[.text-center]
image::figures/SaidaHomomorfico.png[SaidaHomomorfica, title = "Homomorfico.cpp"]

=== Homomorfico.cpp
Como forma de demonstrar o passa a passo do algoritmo cannypoints, resolvi mostrar o progresso de modificação da imagem conforme se aplica pontilhismo nas imagens após passarem pelo filtro de Canny no loop. A Figura 8 mostra as 5 etapas que o algoritmo passou para a imagem biel.png

[[exa_cannypoints, cannypoints]]
[source,cpp]
----
include::exemplos/cannypoints.cpp[]
----
[.text-center]
image::figures/Saida_Canny_Pontilhismo.png[Saida_Canny_Pontilhismo, title = "cannypoints.cpp"]

=== kmeans.cpp
Feito as devidas modificações no código original kmeans.cpp disponibilizado, é possível verificar algumas mudanças nas imagens finais, sendo essas mudanças mais acentuadas nas regiões de transição de cores. 
O que se constatou é que, devido ao parâmetro KMEANS_RANDOM_CENTERS, o algoritmo pode ter passado pelo chamado "Random Initialization Trap", que é um fenômeno que ocorre quando os pontos de inicialização são distribuídos de forma que a convergência dos pontos se dê em locais pouco estratégicos, o que conforme a convergência ocorre, tendem a alocar os centros em regiões em que a classificação não é tao adequada quanto  deveria.


[[exa_kmeans, kmeans]]
[source,cpp]
----
include::exemplos/kmeans.cpp[]
----
[.text-center]
image::figures/nRodadas=1.jpg[nRodadas=1, title = "nRodadas=1.jpg"]
[.text-center]
image::figures/nRodadas=10.jpg[nRodadas=10, title = "nRodadas=10.jpg"]

