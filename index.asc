= PROCESSAMENTO DIGITAL DE IMAGENS
Daniel Henrique Silva Fernandes <danielhenriquesou@hotmail.com>

== Unidade 1

=== 2.2 - Regions
Após compilado, para executar o programa, basta executar da seguinte forma "./img x0 y0 xf yf" onde "img" é a imagem que se queira trabalhar, x0 e y0 são os pontos iniciais de onde o negativo vai começar a passar e xf e yf os finais

[[exa_regions, regions]]
[source,cpp]
----
include::exemplos/regions.cpp[]
----

[[fig_regions,regions]]
[.text-center]
image::figures/regions.png[regions, title = "regions.cpp"]

=== 2.2 Troca de Regiões

[[exa_trocaregioes, trocaregioes]]
[source,cpp]
----
include::exemplos/trocaregioes.cpp[]
----

[[fig_trocaregioes,trocaregioes]]
[.text-center]
image::figures/trocaregioes.png[trocaregioes, title = "trocaregioes.cpp"]

=== 3.2 Mais de 255 objetos

[[exa_3.2-1, 3.2-1]]
[source,cpp]
----
include::exemplos/3.2-1.cpp[]
----

=== 3.2 Regiões com ou sem buracos internos

[[exa_labeling, labeling]]
[source,cpp]
----
include::exemplos/labeling.cpp[]
----
[.text-center]
image::figures/labeling.png[labeling, title = "labeling.cpp"]

=== 4.2 Equalize
[[exa_equalize, equalize]]
[source,cpp]
----
include::exemplos/equalize.cpp[]
----
[.text-center]
image::figures/equalize.png[labeling, title = "equalize.cpp"]

=== 4.2 Motion Detector
[[exa_motiondetector, motiondetector]]
[source,cpp]
----
include::exemplos/motiondetector.cpp[]
----
[.text-center]
image::figures/motiondetector.png[motiondetector, title = "motiondetector.cpp"]

=== 5.2 Laplaciano do Gaussiano
[[exa_lapgauss, lapgauss]]
[source,cpp]
----
include::exemplos/filtroespacial.cpp[]
----
[.text-center]
image::figures/lapgauss.png[lapgauss, title = "lapgauss.cpp"]

== Unidade 2
=== Homomorfico.cpp
De Modo a facilitar o entendimento do código, resolvi aplicar o filtro em uma imagem fixa, de modo que o parâmetro de iluminação pudesse ficar fixo, restando apenas para o programador escolher o valor das variáveis. 
A saída do programa mostrado na Figura 7 apresenta a imagem original, a imagem apos passar pelo filtro homomórfico e a máscara que aplicou a transformação. Lembrando que essa mascara não é um binário de 1 ou 0, e sim de diversos valores reais. O fato de parecer um filtro se da apenas devido a normalização feita para demonstrar para o usuário.  
[[exa_homomorfico, homomorfico]]
[source,cpp]
----
include::exemplos/homomorfico2.cpp[]
----
[.text-center]
image::figures/SaidaHomomorfico.png[SaidaHomomorfica, title = "Homomorfico.cpp"]

=== Homomorfico.cpp
Como forma de demonstrar o passa a passo do algoritmo cannypoints, resolvi mostrar o progresso de modificação da imagem conforme se aplica pontilhismo nas imagens após passarem pelo filtro de Canny no loop. A Figura 8 mostra as 5 etapas que o algoritmo passou para a imagem biel.png

[[exa_cannypoints, cannypoints]]
[source,cpp]
----
include::exemplos/cannypoints.cpp[]
----
[.text-center]
image::figures/Saida_Canny_Pontilhismo.png[Saida_Canny_Pontilhismo, title = "cannypoints.cpp"]

=== kmeans.cpp
Feito as devidas modificações no código original kmeans.cpp disponibilizado, é possível verificar algumas mudanças nas imagens finais, sendo essas mudanças mais acentuadas nas regiões de transição de cores. 
O que se constatou é que, devido ao parâmetro KMEANS_RANDOM_CENTERS, o algoritmo pode ter passado pelo chamado "Random Initialization Trap", que é um fenômeno que ocorre quando os pontos de inicialização são distribuídos de forma que a convergência dos pontos se dê em locais pouco estratégicos, o que conforme a convergência ocorre, tendem a alocar os centros em regiões em que a classificação não é tao adequada quanto  deveria.


[[exa_kmeans, kmeans]]
[source,cpp]
----
include::exemplos/kmeans.cpp[]
----
[.text-center]
image::figures/nRodadas=1.jpg[nRodadas=1, title = "nRodadas=1.jpg"]
[.text-center]
image::figures/nRodadas=10.jpg[nRodadas=10, title = "nRodadas=10.jpg"]

== Unidade 3 - Treinamento Viola-Jones

=== Integrantes do Grupo para o Projeto da Unidade 3:
 
DANIEL HENRIQUE SILVA FERNANDES

LUIZ CARLOS ABBOTT GALVÃO NETO 

=== Pré-requisitos 
OpenCV > 3.0.0 instalados para as linguagens C/C++ e Python

=== Objetivo:
Mostrar as utilizações dos comandos opencv_createsamples, opencv_annotation, opencv_traincascade e opencv_visualisation para treinar o seu próprio arquivo cascade

=== Descrição dos problemas:
Nesse trabalho definimos dois desafios que serão:

1. Dado uma imagem que contenha o objeto desejado para identificar, gerar varias imagens positivas a partir dela. Essa estrategia é útil para logotipos que não variam muito sua forma. Para essa etapa, o objetivo sera o de identificar o simbolo da Coca-Cola

2. Fornecer um conjunto de Imagens Positivas para treinar o cascade. Nessa etapa, o objetivo será o de identificar a palma da mão de uma pessoa

=== Encontrando o Simbolo da Coca-Cola

A imagem tomada como base para é mostrada na Figura 11

[.text-center]
image::exemplos/Unidade3/coke.jpg[Coca-Cola, title = "Imagem Base"]

Em seguida, selecionamos só a área de interesse usando o algoritmo selectarea.cpp 

[[exa_selectarea, selectarea]]
[source,cpp]
----
include::exemplos/Unidade3/selectarea.cpp[]
----

Após selecionar nossa região de interesse, nossa imagem ficou como mostrada a seguir:

[.text-center]
image::exemplos/Unidade3/coke-resize.jpg[ResizeCoca-Cola.jpg, title = "Coca-Cola_resize.jpg"]

Apesar de termos cortado a imagem original, nossa região de interesse ainda gerou uma imagem com muitos pixeis (1246,402). Com isso com intuito de simplificar o processo de criação do nosso próprio cascade, diminuímos 90% e convertemos a imagem para tons de cinza. Para isso, usamos o código ResizePositive.py mostrado a seguir

[[exa_FindCoke, FindCoke]]
[source,python]
----
include::exemplos/Unidade3/ResizePositive.py[]
----

Com isso, nossa imagem base final para o cascade ficou como:
[.text-center]
image::exemplos/Unidade3/coke-gray.jpg[coke-gray.jpg, title = "imagem Base"]

==== Adquirindo imagens Negativas

Para que se possa treinar o cascade usando uma imagem como base, é necessário um conjunto de imagens negativas, tanto para mostrar ao algoritmo o que não procurar, quanto para inserir a figura nessas imagens. 
As figuras usadas como negativas foram obtidas através do link:
http://host.robots.ox.ac.uk/pascal/VOC/voc2007/[http://host.robots.ox.ac.uk/pascal/VOC/voc2007/]

Esse banco de imagens foi armazenado em uma pasta intitulada "Negatives", o passo seguindo foi criar um arquivo "bg.txt" que contivesse um caminho para todas essas imagens. Para criar o arquivo "bg.txt", usamos o algoritmo CountNegatives.py, que além de criar o arquivo, redimensionou as imagens para 4 vezes a imagem base e as pôs tom de cinza

[[exa_CountNegatives, CountNegatives]]
[source,python]
----
include::exemplos/Unidade3/CountNegatives.py[]
----

Nosso arquivo bg.txt fica como 
.bg.txt
,===
include::exemplos/Unidade3/bg2.txt[]
,===

==== Gerando Imagens Positivas com Base nas Negativas

O comando opencv_createsamples permite criar um conjunto de imagens positivas tomando como base o banco de imagens negativas. Além dele uma serie de parâmetros devem ser levados em consideração, tais como:

Onde:

-img: Imagem de referência

-bg: Listagem da Localização do conjunto de imagem negativas

-info: Localização de onde estarão as novas imagens, juntamente do arquivo .dat, que referenciará as imagens positivas

-maxxangle: Rotação máxima da imagem base em x

-maxyangle: Rotação máxima da imagem base em y

-maxzangle: Rotação máxima da imagem base em z

-num: Número de imagens Negativas

-w: Largura proporcional da imagem

-h: Altura proporcional da imagem

O comando usado para isso pode ser mostrado a seguir:

opencv_createsamples -img coke-gray.jpg -bg bg.txt -info info3/info.dat -maxxangle 0.5 -maxyangle 0.5 -maxzangle 0.5 -num 9963 -w 24 -h 8

Após lançado esse comando, a pasta info/ estará contendo 9963 imagens com o logotipo da Coca-Cola inserido de forma randômica, como mostrado nas imagens a seguir:

[.text-center]
image::exemplos/Unidade3/9959_0182_0074_0163_0054.jpg[0045_0126_0047_0314_0104, title = "Imagem positiva 1"]

[.text-center]
image::exemplos/Unidade3/9961_0229_0036_0201_0067.jpg[0159_0275_0014_0154_0051, title = "Imagem positiva 2"]

E o arquivo info.dat estará como

.info.dat
,===
include::FindCoke/info3/info2.dat[]
,===

==== Criando o arquivo positives.vec

O penultimo passo é criar um arquivo .vec que será usado para o treinamento, basicamente é um arquivo que vai armazenar, assim como o info.dat, a localização das imagens positivas

Com isso, lançamos o comando:

opencv_createsamples -info info3/info.dat -w 24 -h 8 -num 9963 -vec positives.vec

==== Treinamento

Possuindo o maior número de argumentos possível,o comando opencv_traincascade é onde ocorre o passo final e é a etapa mais desafiadora. Contudo é possível realizar um treinamento com parâmetros aceitáveis 
o seguinte número de argumentos:

opencv_traincascade -data data3 -vec positives.vec -bg bg.txt -numPos 5400 -numNeg 2700 -numStages 25 -w 24 -h 8

Onde:

-data: Pasta onde será salvo o arquivo "cascade.xml"

-vec: arquivo .vec criado anteriormente

-numPos: Número de Amostras positivas usadas por rodada

-numNeg: Número de amostras negativas usadas por rodada

-numStages: Número de Estágios ao qual nosso algoritmo vai passar

-w: Largura usada na Imagem Base

-h: Altura Usada na Imagem Base

==== Resultado Final

Após a execução do treinamento, nosso arquivo "cascade.xml" foi capaz de identificar o logotipo da Coca em varias imagens, como mostrados a seguir:

[.text-center]
image::exemplos/Unidade3/demo0.jpg[demo0.jpg, title = "Exemplo 1"]
[.text-center]
image::exemplos/Unidade3/demo1.jpg[demo1.jpg, title = "Exemplo 2"]
[.text-center]
image::exemplos/Unidade3/demo2.jpg[demo2.jpg, title = "Exemplo 3"]
[.text-center]
image::exemplos/Unidade3/demo3.jpg[demo3.jpg, title = "Exemplo 4"]



=== Referências

https://docs.opencv.org/3.4/dc/d88/tutorial_traincascade.html[https://docs.opencv.org/3.4/dc/d88/tutorial_traincascade.html]


















































